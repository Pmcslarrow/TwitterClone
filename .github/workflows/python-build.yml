# This workflow will install Python dependencies and run tests with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# description: 'Generates lambda_functions build, runs tests on pull requests of main branch.'
name: 'Python Build'

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.13']

    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: TwitterClone
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
          TZ: UTC
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
          python setup.py install

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u root -proot -e "SELECT 1;" > /dev/null 2>&1; then
              echo "MySQL is up and running!"
              break
            fi
            echo "Waiting for MySQL... Attempt $i/30"
            sleep 2
            if [ $i -eq 30 ]; then
              echo "MySQL did not become ready in time"
              exit 1
            fi
          done

      - name: Initialize database
        run: |
          mysql -h 127.0.0.1 -u root -proot < init.sql

      - name: Test with pytest
        env:
          DB_HOST: 127.0.0.1
          DB_USER: test_user
          DB_PASSWORD: test_pass
          DB_NAME: TwitterClone
        run: |
          pytest --cov=lambda_functions --cov-report=xml --cov-report=term -vv --durations=0